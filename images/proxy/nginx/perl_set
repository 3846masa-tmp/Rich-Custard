perl_set $req_connection '

use strict;
use warnings;

sub {
  my $r = shift;
  return $r->header_in("Connection") || "Keep-Alive";
}
';

perl_set $proxy '

use strict;
use warnings;
use IO::Socket::UNIX;
use JSON "decode_json";

sub {
  my $r = shift;

  my $host = $r->header_in("Host");
  $host =~ s/\Q$ENV{"DOMAIN"}\E//;
  my ($container, $port) = split(/\./, $host);

  my $sock = IO::Socket::UNIX->new(
    Type => SOCK_STREAM(),
    Peer => "/var/run/docker.sock",
    Timeout => 1
  );
  $sock->print("GET /containers/${container}/json HTTP/1.0\n\n");

  my $json = "";
  while (my $line = $sock->getline) {
    $json .= $line;
  }
  $sock->close;
  return "" unless ($json =~ m{^HTTP/1\.0\s*200});

  $json =~ s/^[\s\S]*?\r\n\r\n//;
  my $data = decode_json($json);
  return "" if ($$data{"Config"}{"Hostname"} eq $ENV{"HOSTNAME"});

  my $default_port = "80";
  foreach my $env_str (@{$$data{"Config"}{"Env"}}) {
    next unless ($env_str =~ /^DEFAULT_PROXY_PORT=(\d+)$/);
    $default_port = $1;
  }
  $port = ($port =~ /^\d+$/) ? $port : $default_port;

  return $$data{"NetworkSettings"}{"IPAddress"} . ":" . $port;
}

';

